name: Rust Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            name: linux
            artifact_name: reassembly_shape_editor-linux
            asset_name: reassembly_shape_editor-linux.tar.gz
          - os: windows-latest
            name: windows
            artifact_name: reassembly_shape_editor-windows
            asset_name: reassembly_shape_editor-windows.zip
          - os: macos-latest
            name: macos
            artifact_name: reassembly_shape_editor-macos
            asset_name: reassembly_shape_editor-macos.tar.gz

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build
      run: cargo build --release
      
    - name: Run tests
      run: cargo test --release

    - name: Create artifact directory
      run: mkdir artifacts

    - name: Package Binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cp target/release/reassembly_shape_editor artifacts/
        cp -r assets artifacts/
        tar -czf ${{ matrix.asset_name }} -C artifacts .
        
    - name: Package Binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Copy-Item target/release/reassembly_shape_editor.exe artifacts/
        Copy-Item -Recurse assets artifacts/
        Compress-Archive -Path artifacts/* -DestinationPath ${{ matrix.asset_name }}
        
    - name: Package Binary (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cp target/release/reassembly_shape_editor artifacts/
        cp -r assets artifacts/
        tar -czf ${{ matrix.asset_name }} -C artifacts .
        
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.asset_name }}
        
  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WebAssembly
      run: |
        wasm-pack build --target web
        mkdir -p web/pkg
        cp -r pkg/* web/pkg/
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v2
      with:
        name: reassembly_shape_editor-wasm
        path: web/ 